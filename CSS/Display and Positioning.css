/* Position: Relative
This value allows you to position an element relative to its default static position on the web page.
This is used by accompanying the position declaration with one or more of the following offset properties that will move the element away from its default static position:

- top - moves the element down from the top.
- bottom - moves the element up from the bottom.
- left - moves the element away from the left side (to the right).
- right - moves the element away from the right side (to the left).

It’s also important to note that offset properties will not work if the element’s position property is the default static.
*/
.green-box {
    background-color: green;
    position: relative;
    top: 50px;
    left: 120px;
}


/* Position: Absolute
When an element’s position is set to absolute, all other elements on the page will ignore the element and act like it is not present on the page. The element will be positioned relative to its closest positioned parent element, while offset properties can be used to determine the final position from there. 
*/


/* Position: Fixed
We can fix an element to a specific position on the page (regardless of user scrolling) by setting its position to fixed, and accompanying it with the familiar offset properties top, bottom, left, and right.
*/
.title {
    position: fixed;
    top: 0px;
    left: 0px;
}

/* Position: Sticky
The sticky value is another position value that keeps an element in the document flow as the user scrolls, but sticks to a specified position as the page is scrolled further. This is done by using the sticky value along with the familiar offset properties, as well as one new one.
*/
.box-bottom {
    background-color: darkgreen;
    position: sticky;
    top: 240px;
}

/* Z-Index
When boxes on a web page have a combination of different positions, the boxes (and therefore, their content) can overlap with each other, making the content difficult to read or consume.
The z-index property controls how far back or how far forward an element should appear on the web page when elements overlap. This can be thought of as the depth of elements, with deeper elements appearing behind shallower elements.
*/
.blue-box {
    background-color: blue;
    position: relative;
    z-index: 1;
}

.green-box {
    background-color: green;
    position: relative;
    top: -170px;
    left: 170px;
}


/* Inline Display
Inline elements have a box that wraps tightly around their content, only taking up the amount of space necessary to display their content and not requiring a new line after each element. The height and width of these elements cannot be specified in the CSS document. For example, the text of an anchor tag (<a>) will, by default, be displayed on the same line as the surrounding text, and it will only be as wide as necessary to contain its content. inline elements cannot be altered in size with the height or width CSS properties.
*/
h1 {
    display: inline;
}


/* Display: Block
Some elements are not displayed in the same line as the content around them. These are called block-level elements. These elements fill the entire width of the page by default, but their width property can also be set. Unless otherwise specified, they are the height necessary to accommodate their content.
*/
strong {
    display: block;
}


/* Display: Inline-Block
Inline-block display combines features of both inline and block elements. Inline-block elements can appear next to each other and we can specify their dimensions using the width and height properties. Images are the best example of default inline-block elements.
*/
.rectangle {
    display: inline-block;
    width: 200px;
    height: 300px;
}


/* Float
The float property is commonly used for wrapping text around an image. Note, however, that moving elements left or right for layout purposes is better suited for tools like CSS grid and flexbox
*/
.green-section {
    width: 50%;
    height: 150px;
}
   
.orange-section {
    background-color: orange;
    width: 50%;
    float: right;
}


/* Clear
When multiple floated elements have different heights, it can affect their layout on the page. Specifically, elements can “bump” into each other and not allow other elements to properly move to the left or right.

The clear property specifies how elements should behave when they bump into each other on the page. It can take on one of the following values:

- left—the left side of the element will not touch any other element within the same containing element.
- right—the right side of the element will not touch any other element within the same containing element.
- both—neither side of the element will touch any other element within the same containing element.
- none—the element can touch either side.
*/
div {
    width: 200px;
    float: left;
}
   
div.special {
    clear: left;
}