/* EM
Incorporating relative sizing starts by using units other than pixels. One unit of measurement you can use in CSS to create relatively-sized content is the em, written as em in CSS.

The em represents the font-size of the current element or the default base font-size set by the browser if none is given. For example, if the base font of a browser is 16 pixels (which is normally the default size of text in a browser), then 1 em is equal to 16 pixels. 2 ems would equal 32 pixels, and so on.
*/
.heading {
    font-size: 2em;
}


/* REM
The second relative unit of measurement in CSS is the rem, coded as rem.

Rem stands for root em. It acts similar to em, but instead of checking parent elements to size font, it checks the root element. The root element is the <html> tag.

Most browsers set the font size of <html> to 16 pixels, so by default rem measurements will be compared to that value. To set a different font size for the root element, you can add a CSS rule.
*/
html {
    font-size: 20px;
}
   
h1 {
    font-size: 2rem; /* 40 pixels */
}


/* Percentages of Height and Width
To size non-text HTML elements relative to their parent elements on the page you can use percentages.

Percentages are often used to size box-model values, like width and height, padding, border, and margins. They can also be used to set positioning properties (top, bottom, left, right).
*/
.main {
    height: 300px;
    width: 500px;
}
   
.main .subsection {
    height: 50%;
    width: 50%;
}


/* Percentages: Padding & Margin 
Percentages can also be used to set the padding and margin of elements. When height and width are set using percentages, you learned that the dimensions of child elements are calculated based on the dimensions of the parent element.
When percentages are used to set padding and margin, however, they are calculated based only on the width of the parent element.
*/
.images {
    margin-bottom: 20%;
}


/* Width: Mimimum & Maximum
Although relative measurements provide consistent layouts across devices of different screen sizes, elements on a website can lose their integrity when they become too small or large. You can limit how wide an element becomes with the following properties:

1. min-width — ensures a minimum width for an element.
2. max-width — ensures a maximum width for an element.
3. min-height — ensures a minimum height for an element’s box.
4. max-height — ensures a maximum height for an element’s box.

*/
p {
    min-width: 300px;
    max-width: 600px;

    min-height: 150px;
    max-height: 300px;
}


/* Scaling Images and Videos
In the example below, .container represents a container div. It is set to a width of 50% (half of the browser’s width, in this example) and a height of 200 pixels. Setting overflow to hidden ensures that any content with dimensions larger than the container will be hidden from view.

The second CSS rule ensures that images scale with the width of the container. The height property is set to auto, meaning an image’s height will automatically scale proportionally with the width. Finally, the last line will display images as block level elements (rather than inline-block, their default state). This will prevent images from attempting to align with other content on the page (like text), which can add unintended margin to the images.

It’s worth memorizing the entire example above. It represents a very common design pattern used to scale images and videos proportionally.
*/
.container {
    width: 50%;
    height: 200px;
    overflow: hidden;
}
   
.container img {
    max-width: 100%;
    height: auto;
    display: block;
}


/* Scaling Background Images
Background images of HTML elements can also be scaled responsively using CSS properties.
*/
body {
    background-image: url('#'); /* <-- # placeholder for URL */
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
}